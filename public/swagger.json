{
  "openapi": "3.0.0",
  "info": {
    "title": "Twitter API Documentation",
    "version": "1.0.0",
    "description": "API description"
  },
  "paths": {
    "/api/signup": {
      "post": {
        "summary": "User Signup",
        "description": "Endpoint for user registration. This will create a new user with provided details.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the user"
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address of the user",
                    "format": "email"
                  },
                  "dateOfBirth": {
                    "type": "string",
                    "description": "The date of birth of the user",
                    "format": "date"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the user account",
                    "minLength": 8
                  }
                },
                "required": ["name", "email", "dateOfBirth", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User created successfully, please log in"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields or invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Missing required fields: name, email, dateOfBirth, password"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error, please try again later"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/{nextauthParam}": {
      "parameters": [
        {
          "name": "nextauthParam",
          "in": "path",
          "required": true,
          "description": "Dynamic NextAuth provider parameter (e.g., 'session', 'csrf', 'callback', 'signin', 'signout')",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Authenticate user with NextAuth",
        "description": "Authenticate a user with NextAuth using the configured providers (e.g., GitHub, Google).",
        "responses": {
          "200": {
            "description": "User authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "session": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "email": { "type": "string" },
                            "name": { "type": "string" },
                            "image": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized access"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Sign in with credentials",
        "description": "Sign in the user using credentials or OAuth provider (e.g., GitHub, Google).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identifier": {
                    "type": "string",
                    "description": "Username or email address"
                  },
                  "password": {
                    "type": "string",
                    "description": "User password"
                  }
                },
                "required": ["identifier", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User signed in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "session": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "email": { "type": "string" },
                            "name": { "type": "string" },
                            "image": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid username or password"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error, please try again later"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/forget-password": {
      "post": {
        "summary": "Verify user email",
        "description": "Sends a verification email to the user with a verification link.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The user's email address to send the verification email."
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Verification email sent successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid email address"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reset-password": {
      "post": {
        "summary": "Reset user password",
        "description": "Resets the password for a user based on their email. The user must provide their email and new password.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The user's email address."
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "description": "The new password for the user. Must be at least 8 characters long."
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email or password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email and password are required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "Get all users",
        "description": "Fetches a list of all users.",
        "responses": {
          "200": {
            "description": "Successfully retrieved users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "60d5f9a2f3a4b035ac4f789a"
                      },
                      "name": { "type": "string", "example": "John Doe" },
                      "email": {
                        "type": "string",
                        "example": "john@example.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Server error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/follow": {
      "post": {
        "summary": "Follow a user",
        "description": "Allows a user to follow another user. Ensures that the user is authenticated and not already following the target user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userIdToFollow": {
                    "type": "string",
                    "description": "The ID of the user to follow."
                  }
                },
                "required": ["userIdToFollow"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully followed the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Followed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing or invalid data (e.g., user already following)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Already following this user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - User or user to follow not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/unfollow": {
      "post": {
        "summary": "Unfollow a user",
        "description": "Allows a user to unfollow another user. Ensures the user is authenticated and currently following the target user before unfollowing.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userIdToUnfollow": {
                    "type": "string",
                    "description": "The ID of the user to unfollow."
                  }
                },
                "required": ["userIdToUnfollow"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully unfollowed the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unfollowed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing or invalid data (e.g., user not following the target user)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "You are not following this user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - User or user to unfollow not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User to unfollow not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/is-following": {
      "get": {
        "summary": "Check if user is following another user",
        "description": "Checks if a specific user is following another user based on the provided user ID and follower ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "description": "The ID of the user whose followers are being checked.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "followerId",
            "in": "query",
            "required": true,
            "description": "The ID of the user who may or may not be following the other user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Follow status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isFollowing": {
                      "type": "boolean",
                      "description": "True if the user is following, false otherwise"
                    }
                  },
                  "example": {
                    "isFollowing": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid user/follower ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Missing user or follower ID"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/posts": {
      "get": {
        "summary": "Get all posts",
        "description": "Fetches all posts from the database, including user details and media if available.",
        "responses": {
          "200": {
            "description": "Successfully retrieved posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "postId": {
                        "type": "string",
                        "example": "60d5f9a2f3a4b035ac4f789a"
                      },
                      "postText": {
                        "type": "string",
                        "example": "This is a sample post"
                      },
                      "userId": {
                        "type": "string",
                        "example": "60d5f9a2f3a4b035ac4f789b"
                      },
                      "likeCount": { "type": "integer", "example": 15 },
                      "likedBy": {
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["userId1", "userId2"]
                      },
                      "postMedia": {
                        "type": "array",
                        "items": { "type": "string" },
                        "example": ["image1.jpg", "image2.jpg"]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No posts available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No posts available"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Error fetching posts"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new post",
        "description": "Allows a user to create a new post with text and/or media.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userEmail": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "postText": {
                    "type": "string",
                    "example": "This is my first post!"
                  },
                  "postMedia": {
                    "type": "array",
                    "items": { "type": "string" },
                    "example": ["image1.jpg", "image2.jpg"]
                  },
                  "parentId": {
                    "type": "string",
                    "nullable": true,
                    "example": "60d5f9a2f3a4b035ac4f789a"
                  }
                },
                "required": ["userEmail"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "postId": {
                      "type": "string",
                      "example": "60d5f9a2f3a4b035ac4f789a"
                    },
                    "userId": {
                      "type": "string",
                      "example": "60d5f9a2f3a4b035ac4f789b"
                    },
                    "postText": {
                      "type": "string",
                      "example": "This is my first post!"
                    },
                    "postMedia": {
                      "type": "array",
                      "items": { "type": "string" },
                      "example": ["image1.jpg"]
                    },
                    "likeCount": { "type": "integer", "example": 0 }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing user email or post content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Missing user email or post content"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Error creating post"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/posts/{postId}": {
      "get": {
        "summary": "Get Post and Comments by Post ID",
        "description": "Fetch a post by its ID along with its associated comments. Returns a 404 error if the post is not found, or a 500 error for server issues.",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The ID of the post to fetch with comments.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the post and comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "post": {
                      "type": "object",
                      "properties": {
                        "postId": {
                          "type": "string",
                          "description": "The ID of the post"
                        },
                        "postText": {
                          "type": "string",
                          "description": "The content of the post"
                        },
                        "likeCount": {
                          "type": "integer",
                          "description": "The number of likes on the post"
                        },
                        "likedBy": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of user IDs who liked the post"
                        },
                        "comments": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "commentId": {
                                "type": "string",
                                "description": "The ID of the comment"
                              },
                              "commentText": {
                                "type": "string",
                                "description": "The content of the comment"
                              },
                              "userId": {
                                "type": "string",
                                "description": "ID of the user who made the comment"
                              }
                            }
                          },
                          "description": "List of comments for the post"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Post not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Post not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Error fetching post and comments"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/posts/{postId}/like": {
      "get": {
        "summary": "Toggle Like on Post",
        "description": "Toggles the like status on a post for a specific user. Returns a 404 error if the post or user is not found, or a 500 error for server issues.",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The ID of the post to like or unlike.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "The ID of the user who is liking or unliking the post."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully toggled like on the post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "postId": {
                      "type": "string",
                      "description": "The ID of the post"
                    },
                    "likeCount": {
                      "type": "integer",
                      "description": "The updated number of likes on the post"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Post or User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Post or User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/posts/{postId}/comment": {
      "get": {
        "summary": "Get Post by ID with Comments",
        "description": "Fetch a specific post by its ID along with its associated comments. Returns a 404 error if the post is not found, or a 500 error for server issues.",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The ID of the post to fetch.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched post and comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "post": {
                      "type": "object",
                      "properties": {
                        "postId": {
                          "type": "string",
                          "description": "The ID of the post"
                        },
                        "postText": {
                          "type": "string",
                          "description": "The content of the post"
                        },
                        "userId": {
                          "type": "string",
                          "description": "The ID of the user who created the post"
                        }
                      }
                    },
                    "comments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "commentId": {
                            "type": "string",
                            "description": "The ID of the comment"
                          },
                          "commentText": {
                            "type": "string",
                            "description": "The content of the comment"
                          },
                          "userId": {
                            "type": "string",
                            "description": "The ID of the user who made the comment"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Post not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Post not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/notifications": {
      "get": {
        "summary": "Get notifications",
        "responses": {
          "200": {
            "description": "Successfully retrieved notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "message": { "type": "string" },
                      "createdAt": { "type": "string", "format": "date-time" }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create notifications",
        "responses": {
          "201": {
            "description": "Notification created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "message": { "type": "string" },
                    "createdAt": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update notifications",
        "responses": {
          "200": {
            "description": "Notification updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "message": { "type": "string" },
                    "updatedAt": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/socket": {
      "get": {
        "summary": "Get socket",
        "responses": {
          "200": {
            "description": "Successfully retrieved socket",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "socketId": { "type": "string" },
                    "status": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create socket",
        "responses": {
          "201": {
            "description": "Socket created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "socketId": { "type": "string" },
                    "status": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages": {
      "get": {
        "summary": "Get messages",
        "responses": {
          "200": {
            "description": "Successfully retrieved messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "content": { "type": "string" },
                      "createdAt": { "type": "string", "format": "date-time" }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create messages",
        "responses": {
          "201": {
            "description": "Message created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "content": { "type": "string" },
                    "createdAt": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/{senderId}/{receiverId}": {
      "get": {
        "summary": "Get messages between two users",
        "description": "Fetches the most recent message between the specified sender and receiver. Returns a 404 error if no message is found, or a 500 error for server issues.",
        "parameters": [
          {
            "name": "senderId",
            "in": "path",
            "required": true,
            "description": "The ID of the sender.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiverId",
            "in": "path",
            "required": true,
            "description": "The ID of the receiver.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sender": {
                      "type": "string",
                      "description": "Sender's ID"
                    },
                    "receiver": {
                      "type": "string",
                      "description": "Receiver's ID"
                    },
                    "message": {
                      "type": "string",
                      "description": "The content of the message"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The time when the message was created"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No existing message found between the two users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No existing message found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/last": {
      "get": {
        "summary": "Get the most recent message between two users",
        "description": "Fetches the most recent message between the specified sender and receiver. Returns a 404 error if no message is found, or a 500 error for server issues.",
        "parameters": [
          {
            "name": "senderId",
            "in": "path",
            "required": true,
            "description": "The ID of the sender.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiverId",
            "in": "path",
            "required": true,
            "description": "The ID of the receiver.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the last message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sender": {
                      "type": "string",
                      "description": "Sender's ID"
                    },
                    "receiver": {
                      "type": "string",
                      "description": "Receiver's ID"
                    },
                    "message": {
                      "type": "string",
                      "description": "The content of the message"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The time when the message was created"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No existing message found between the two users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No existing message found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/seen": {
      "post": {
        "summary": "Mark a message as seen",
        "description": "Marks a message as 'seen' by a specific user. Returns a 404 error if the message is not found, or a 500 error for server issues.",
        "parameters": [
          {
            "name": "messageId",
            "in": "body",
            "required": true,
            "description": "The ID of the message to mark as seen.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "seenBy",
            "in": "body",
            "required": true,
            "description": "The ID of the user marking the message as seen.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully marked the message as seen",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "messageId": {
                      "type": "string",
                      "description": "The ID of the message"
                    },
                    "seenBy": {
                      "type": "string",
                      "description": "User ID who marked the message as seen"
                    },
                    "seenAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the message was marked as seen"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Message not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Message not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/self": {
      "get": {
        "summary": "Check if a user has sent a message to themselves",
        "description": "Checks if a user has ever sent a message to themselves. Returns a 400 error if the user ID is missing or a 500 error for server issues.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user to check for self-messages.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully checked self-message status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hasSelfMessage": {
                      "type": "boolean",
                      "description": "Whether the user has sent a message to themselves"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameter: userId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Missing required parameter: userId"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/unread": {
      "get": {
        "summary": "Get Unread Message Count",
        "description": "Fetch the count of unread messages for a specific user. The count is based on the userId and messages that have a null 'seenAt' field.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "description": "The ID of the user to get unread message count for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the unread message count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of unread messages"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing userId parameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Missing userId"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Server error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/with-session": {
      "get": {
        "summary": "Check for Messages Between Two Users",
        "description": "Check if there are messages between a user and another user identified by sessionId. Returns a boolean indicating the existence of messages.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "description": "The ID of the user checking for messages.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "in": "query",
            "required": true,
            "description": "The ID of the session user to check for messages.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully checked if there are messages between the two users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "description": "True if messages exist between the users, otherwise false."
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters (userId or sessionId)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Missing required parameters: userId and sessionId"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Server error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
